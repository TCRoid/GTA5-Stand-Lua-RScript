--------------------------------
-- Author: Rostal
--------------------------------

util.require_natives("3095a", "init")

local SCRIPT_VERSION <const> = "2024/6/29"

local SUPPORT_GAME_VERSION <const> = "1.69-3258"



local Tunables <const> = {
    COLLECTABLES_TRICK_OR_TREAT = 32084,
    COLLECTABLES_SNOWMEN = 33228,
    VC_PEYOTE_ENABLE = 26683,
    FLOW_TIMINGS_TREASURE_HUNT_EMAIL_TIMER = 31033,
    BOUNTYHUNTERHATCHETEMAILTIMER = 23766,
    BOUNTYHUNTERHATCHETEMAILTIMER2 = 23767,
    BOUNTYHUNTERHATCHETEMAILTIMER3 = 23768,
}

local PackedStats <const> = {
    RDR_BOUNTY_HUNTER_NUMBER_OF_BOUNTIES_COMPLETED = 7315,
    REVOLVER_TREASURE_HUNT_PROGRESS = 18981,
}

local Coords <const> = {
    -- 手办 100
    figures = {
        v3(-2557.405, 2315.502, 33.742),
        v3(2487.128, 3759.327, 42.317),
        v3(457.198, 5573.861, 780.184),
        v3(-1280.407, 2549.743, 17.534),
        v3(-107.722, -856.981, 38.261),
        v3(-1050.513, -522.612, 36.634),
        v3(693.306, 1200.583, 344.524),
        v3(2500.654, -389.482, 94.245),
        v3(483.4, -3110.621, 6.627),
        v3(-2169.277, 5192.986, 16.295),
        v3(177.674, 6394.054, 31.376),
        v3(2416.942, 4994.557, 45.239),
        v3(1702.9, 3291, 48.72),
        v3(-600.813, 2088.011, 132.336),
        v3(-3019.793, 41.9486, 10.2924),
        v3(-485.4648, -54.441, 38.9945),
        v3(-1350.785, -1547.089, 4.675),
        v3(379.535, -1509.398, 29.34),
        v3(2548.713, 385.386, 108.423),
        v3(-769.346, 877.307, 203.424),
        v3(-1513.54, 1517.184, 111.305),
        v3(-1023.899, 190.912, 61.282),
        v3(1136.355, -666.404, 57.044),
        v3(3799.76, 4473.048, 6.032),
        v3(1243.588, -2572.136, 42.603),
        v3(219.811, 97.162, 96.336),
        v3(-1545.826, -449.397, 40.318),
        v3(-928.683, -2938.691, 13.059),
        v3(-1647.926, -1094.716, 12.736),
        v3(-2185.939, 4249.814, 48.803),
        v3(-262.339, 4729.229, 137.329),
        v3(-311.701, 6315.024, 31.978),
        v3(3306.444, 5194.742, 17.432),
        v3(1389.886, 3608.834, 35.06),
        v3(852.846, 2166.327, 52.717),
        v3(-1501.96, 814.071, 181.433),
        v3(2634.972, 2931.061, 44.608),
        v3(660.57, 549.947, 129.157),
        v3(-710.626, -905.881, 19.015),
        v3(1207.701, -1479.537, 35.166),
        v3(-90.151, 939.849, 232.515),
        v3(-180.059, -631.866, 48.534),
        v3(-299.634, 2847.173, 55.485),
        v3(621.365, -409.254, -1.308),
        v3(-988.92, -102.669, 40.157),
        v3(63.999, 3683.868, 39.763),
        v3(-688.668, 5829.006, 16.775),
        v3(1540.435, 6323.453, 23.519),
        v3(2725.806, 4142.14, 43.293),
        v3(1297.977, 4306.744, 37.897),
        v3(1189.579, 2641.222, 38.413),
        v3(-440.796, 1596.48, 358.648),
        v3(-2237.557, 249.282, 175.352),
        v3(-1211.932, -959.965, 0.393),
        v3(153.845, -3077.341, 6.744),
        v3(-66.231, -1451.825, 31.164),
        v3(987.982, -136.863, 73.454),
        v3(-507.032, 393.905, 96.411),
        v3(172.1275, -564.1393, 22.145),
        v3(1497.202, -2133.147, 76.302),
        v3(-2958.706, 386.41, 14.434),
        v3(1413.963, 1162.483, 114.351),
        v3(-1648.058, 3018.313, 31.25),
        v3(-1120.2, 4977.292, 185.445),
        v3(1310.683, 6545.917, 4.798),
        v3(1714.573, 4790.844, 41.539),
        v3(1886.644, 3913.758, 32.039),
        v3(543.476, 3074.79, 40.324),
        v3(1408.045, 2157.34, 97.575),
        v3(-3243.858, 996.179, 12.486),
        v3(-1905.566, -709.6311, 8.766),
        v3(-1462.089, 182.089, 54.953),
        v3(86.997, 812.619, 211.062),
        v3(-886.554, -2096.579, 8.699),
        v3(367.684, -2113.475, 16.274),
        v3(679.009, -1522.824, 8.834),
        v3(1667.377, 0.119, 165.118),
        v3(-293.486, -342.485, 9.481),
        v3(462.664, -765.675, 26.358),
        v3(-57.784, 1939.74, 189.655),
        v3(2618.411, 1692.395, 31.9462),
        v3(-1894.554, 2043.517, 140.9093),
        v3(2221.858, 5612.785, 54.0631),
        v3(-551.3712, 5330.728, 73.9861),
        v3(-2171.406, 3441.188, 32.175),
        v3(1848.131, 2700.702, 63.008),
        v3(-1719.602, -232.886, 54.4441),
        v3(-55.3785, -2519.755, 7.2875),
        v3(874.8454, -2163.998, 32.3688),
        v3(-43.6983, -1747.961, 29.2778),
        v3(173.324, -1208.43, 29.6564),
        v3(2936.323, 4620.483, 48.767),
        v3(3514.655, 3754.687, 34.4766),
        v3(656.9, -1046.931, 21.5745),
        v3(-141.1536, 234.8366, 99.0008),
        v3(-1806.68, 427.6159, 131.765),
        v3(-908.9565, -1148.917, 2.3868),
        v3(387.9323, 2570.408, 43.299),
        v3(2399.505, 3062.746, 53.4703),
        v3(2394.721, 3062.689, 51.2379),
    },
    -- 信号干扰器 50
    jammers = {
        v3(1006.372, -2881.68, 30.422),
        v3(-980.242, -2637.703, 88.528),
        v3(-688.195, -1399.329, 23.331),
        v3(1120.696, -1539.165, 54.871),
        v3(2455.134, -382.585, 112.635),
        v3(793.878, -717.299, 48.083),
        v3(-168.3, -590.153, 210.936),
        v3(-1298.343, -435.8369, 108.129),
        v3(-2276.484, 335.0941, 195.723),
        v3(-667.25, 228.545, 154.051),
        v3(682.561, 567.5302, 153.895),
        v3(2722.561, 1538.103, 85.202),
        v3(758.539, 1273.687, 445.181),
        v3(-3079.258, 768.5189, 31.569),
        v3(-2359.338, 3246.831, 104.188),
        v3(1693.732, 2656.602, 60.84),
        v3(3555.018, 3684.98, 61.27),
        v3(1869.022, 3714.435, 117.068),
        v3(2902.552, 4324.699, 101.106),
        v3(-508.6141, 4426.661, 87.511),
        v3(-104.417, 6227.278, 63.696),
        v3(1607.501, 6437.315, 32.162),
        v3(2792.933, 5993.922, 366.867),
        v3(1720.613, 4822.467, 59.7),
        v3(-1661.01, -1126.742, 29.773),
        v3(-1873.49, 2058.357, 154.407),
        v3(2122.46, 1750.886, 138.114),
        v3(-417.424, 1153.143, 339.128),
        v3(3303.901, 5169.792, 28.735),
        v3(-1005.848, 4852.147, 302.025),
        v3(-306.627, 2824.859, 69.512),
        v3(1660.663, -28.07, 179.137),
        v3(754.647, 2584.067, 133.904),
        v3(-279.9081, -1915.608, 54.173),
        v3(-260.4421, -2411.807, 126.019),
        v3(552.132, -2221.853, 73),
        v3(394.3919, -1402.144, 76.267),
        v3(1609.791, -2243.767, 130.187),
        v3(234.2919, 220.771, 168.981),
        v3(-1237.121, -850.4969, 82.98),
        v3(-1272.732, 317.9532, 90.352),
        v3(0.088, -1002.404, 96.32),
        v3(470.5569, -105.049, 135.908),
        v3(-548.5471, -197.9911, 82.813),
        v3(2581.047, 461.9421, 115.095),
        v3(720.14, 4097.634, 38.075),
        v3(1242.471, 1876.068, 92.242),
        v3(2752.113, 3472.779, 67.911),
        v3(-2191.856, 4292.408, 55.013),
        v3(450.475, 5581.514, 794.0683),
    },
    -- 纸牌 54
    cards = {
        v3(1992.183, 3046.28, 47.125),
        v3(120.38, -1297.669, 28.705),
        v3(79.293, 3704.578, 40.945),
        v3(2937.738, 5325.846, 100.176),
        v3(727.153, 4189.818, 40.476),
        v3(-103.14, 369.008, 112.267),
        v3(99.959, 6619.539, 32.314),
        v3(-282.6689, 6226.274, 31.3554),
        v3(1707.556, 4921.021, 41.865),
        v3(-1581.86, 5204.295, 3.9093),
        v3(10.8264, -1101.157, 29.613),
        v3(1690.043, 3589.014, 35.5883),
        v3(1159.144, -316.5876, 69.5134),
        v3(2341.807, 2571.737, 47.6079),
        v3(-3048.193, 585.2986, 7.7708),
        v3(-3149.707, 1115.83, 20.7216),
        v3(-1840.641, -1235.319, 13.2937),
        v3(810.6056, -2978.741, 5.8116),
        v3(202.2747, -1645.225, 29.7679),
        v3(253.2056, 215.9778, 106.2848),
        v3(-1166.183, -233.9277, 38.262),
        v3(729.9886, 2514.713, 73.1663),
        v3(188.1851, 3076.332, 43.0447),
        v3(3687.914, 4569.073, 24.9397),
        v3(1876.975, 6410.034, 46.5982),
        v3(2121.146, 4784.687, 40.8114),
        v3(900.0845, 3558.156, 33.6258),
        v3(2695.272, 4324.496, 45.6516),
        v3(-1829.428, 798.4049, 138.0583),
        v3(-1203.725, -1558.866, 4.1736),
        v3(-73.2829, -2005.476, 18.2561),
        v3(-1154.201, -527.2959, 31.7117),
        v3(990.0786, -1800.391, 31.3781),
        v3(827.5513, -2158.744, 29.417),
        v3(-1512.08, -103.625, 54.2027),
        v3(-970.7493, 104.3396, 55.0431),
        v3(-428.6815, 1213.905, 325.9329),
        v3(-167.8387, -297.1122, 39.0353),
        v3(2747.322, 3465.12, 55.6336),
        v3(-1103.659, 2714.689, 19.4539),
        v3(549.4841, -189.3053, 54.4369),
        v3(-1287.689, -1118.818, 6.3057),
        v3(1131.428, -982.0297, 46.6521),
        v3(-1028.083, -2746.936, 13.3589),
        v3(-538.5779, -1278.542, 26.3437),
        v3(1326.449, -1651.263, 52.0964),
        v3(183.3252, -685.2661, 42.607),
        v3(1487.846, 1129.2, 114.3005),
        v3(-2305.538, 3387.973, 31.0201),
        v3(-522.632, 4193.459, 193.7517),
        v3(-748.9897, 5599.534, 41.5794),
        v3(-288.0628, 2545.21, 74.4223),
        v3(2565.326, 296.8703, 108.7367),
        v3(-408.2484, 585.783, 124.378),
    },
    -- 电影道具 7
    movie_prop = {
        v3(94.202, -1294.965, 29.067),
        v3(-1010.051, -502.175, 36.493),
        v3(2517.254, 3789.326, 53.698),
        v3(-2349.036, 3270.785, 32.968),
        v3(1165.416, 247.5531, -50.73),
        v3(-41.795, 2873.231, 59.625),
        v3(-1169.573, 4926.988, 223.7279),
    },
    -- 南瓜 200
    lanterns = {
        v3(-189.701, -763.3126, 29.454),
        v3(-233.321, -909.614, 31.3158),
        v3(-553.5505, -815.0607, 29.6916),
        v3(-728.8868, -678.7939, 29.315),
        v3(-1185.507, -566.7111, 27.3348),
        v3(-1339.806, -409.658, 35.373),
        v3(-1536.558, -423.9365, 34.597),
        v3(-1580.622, -952.5058, 12.0174),
        v3(-1976.58, -532.485, 10.826),
        v3(-1884.625, -366.126, 48.354),
        v3(-1289.285, -1115.446, 6.0404),
        v3(-1503.121, -936.5198, 9.1563),
        v3(-1334.734, -1280.177, 3.836),
        v3(-1183.44, -1559.434, 3.3591),
        v3(-971.0191, -1093.48, 1.1503),
        v3(-840.8212, -1207.88, 5.6051),
        v3(-296.9001, -1334.173, 30.2995),
        v3(-225.556, -1500.448, 31.131),
        v3(-121.627, -1489.878, 32.821),
        v3(-195.651, -1607.897, 33.0368),
        v3(-160.142, -1681.59, 35.964),
        v3(-81.4956, -1642.043, 28.3083),
        v3(-20.704, -1856.823, 24.016),
        v3(23.953, -1897.309, 21.969),
        v3(151.071, -1865.461, 23.205),
        v3(177.9339, -1927.648, 20.0126),
        v3(224.824, -2036.894, 17.38),
        v3(325.4174, -1946.595, 23.7789),
        v3(386.328, -1880.668, 25.035),
        v3(321.5227, -1758.72, 28.3096),
        v3(496.8552, -1819.122, 27.501),
        v3(430.3069, -1724.543, 28.6064),
        v3(413.243, -1487.521, 29.152),
        v3(376.6, -2067.951, 20.369),
        v3(297.152, -2096.86, 16.667),
        v3(1257.384, -1762.429, 48.662),
        v3(1310.985, -1698.068, 56.836),
        v3(1203.222, -1672.258, 41.356),
        v3(1296.15, -1619.214, 53.224),
        v3(1231.962, -1590.563, 52.769),
        v3(1152.695, -1531.528, 34.3815),
        v3(1184.524, -1464.062, 33.823),
        v3(1320.342, -1557.638, 50.2518),
        v3(1435.174, -1491.414, 62.625),
        v3(806.0478, -1073.288, 27.924),
        v3(847.3984, -1021.431, 26.536),
        v3(477.993, -976.005, 26.982),
        v3(387.744, -973.043, 28.437),
        v3(359.719, -1072.742, 28.545),
        v3(262.8465, -1026.979, 28.2158),
        v3(244.76, -1073.888, 28.287),
        v3(1209.887, -1388.977, 34.3769),
        v3(1142.299, -981.9567, 45.1429),
        v3(73.529, -1026.593, 28.475),
        v3(68.017, -960.636, 28.807),
        v3(-16.947, -979.452, 28.503),
        v3(-1205.765, -1135.791, 6.8417),
        v3(-1124.566, -1089.562, 1.549),
        v3(-1075.785, -1027.721, 3.548),
        v3(-961.535, -940.509, 1.149),
        v3(-1028.67, -920.2025, 4.0462),
        v3(-1150.722, -990.091, 1.149),
        v3(-1726.561, -192.421, 57.511),
        v3(-62.999, -1450.793, 31.1237),
        v3(-1548.042, -90.522, 53.933),
        v3(-1465.655, -31.124, 53.696),
        v3(-1475.253, 63.768, 52.328),
        v3(-1565.532, 40.189, 57.883),
        v3(-1650.799, 150.181, 61.167),
        v3(-1538.653, 130.704, 56.37),
        v3(-1179.64, 292.144, 68.497),
        v3(-1023.641, 358.387, 70.36),
        v3(-1131.724, 390.5965, 69.8053),
        v3(-1214.895, 461.5896, 90.8536),
        v3(-1499.284, 523.861, 117.271),
        v3(-1290.108, 648.5641, 140.4938),
        v3(-1123.263, 575.838, 103.394),
        v3(-1025.834, 505.1749, 80.6515),
        v3(-969.444, 434.741, 79.57),
        v3(-864.8736, 389.6919, 86.4873),
        v3(-819.564, 266.954, 85.392),
        v3(-597.9922, 278.1837, 81.1112),
        v3(-571.93, 401.957, 99.665),
        v3(-585.74, 494.794, 106.106),
        v3(-718.91, 490.583, 108.388),
        v3(-884.518, 519.033, 91.441),
        v3(-937.445, 591.477, 100.499),
        v3(-702.494, 589.252, 140.929),
        v3(-888.666, 699.998, 149.6837),
        v3(-1019.008, 718.9766, 162.9962),
        v3(-1163.977, 729.633, 154.61),
        v3(-578.299, 734.835, 183.03),
        v3(-549.275, 826.159, 196.508),
        v3(-493.592, 739.668, 162.035),
        v3(-447.063, 685.288, 151.955),
        v3(-344.611, 624.076, 170.355),
        v3(-247.952, 622.206, 186.809),
        v3(-137.8688, 592.7097, 203.5206),
        v3(-178.251, 502.183, 135.827),
        v3(-353.838, 467.898, 111.6),
        v3(-370.018, 343.79, 108.946),
        v3(-250.332, 397.556, 110.251),
        v3(-85.666, 424.562, 112.224),
        v3(-822.3367, 813.652, 199.8532),
        v3(-1313.372, 451.3146, 99.9888),
        v3(-1686.279, -290.491, 50.892),
        v3(82.5397, -91.9352, 59.5567),
        v3(124.799, 66.057, 78.74),
        v3(12.9173, -8.399, 69.1162),
        v3(-176.8698, 86.8545, 69.2855),
        v3(-438.5465, -67.3735, 42.0095),
        v3(-375.576, 44.577, 53.428),
        v3(-569.9086, 168.254, 65.5663),
        v3(1775.932, 3740.67, 33.6562),
        v3(1915.427, 3825.728, 31.443),
        v3(2002.334, 3780.291, 31.179),
        v3(1923.412, 3916.096, 31.5573),
        v3(1759.466, 3870.604, 33.7011),
        v3(1661.887, 3822.058, 34.473),
        v3(1419.643, 3668.236, 38.7334),
        v3(439.621, 3571.637, 32.237),
        v3(247.488, 3167.516, 41.885),
        v3(197.3604, 3030.443, 42.8867),
        v3(-286.359, 2838.471, 53.973),
        v3(-325.2867, 2816.483, 58.4498),
        v3(-461.6427, 2859.427, 33.7354),
        v3(-37.136, 2869.897, 58.625),
        v3(470.221, 2607.623, 43.481),
        v3(563.666, 2599.943, 42.113),
        v3(733.646, 2524.984, 72.34),
        v3(721.333, 2331.018, 50.754),
        v3(789.176, 2180.511, 51.652),
        v3(843.259, 2113.888, 51.267),
        v3(1531.942, 1729.31, 108.9177),
        v3(2588.599, 3167.521, 50.371),
        v3(2618.848, 3280.744, 54.249),
        v3(2985.01, 3482.104, 70.4419),
        v3(1356.303, 1147.111, 112.759),
        v3(1533.893, 2219.883, 76.2135),
        v3(-148.0881, 287.3474, 95.804),
        v3(1989.794, 3054.594, 46.213),
        v3(2166.818, 3381.051, 45.46),
        v3(2180.096, 3497.361, 44.4592),
        v3(2418.844, 4021.485, 35.802),
        v3(346.24, 441.64, 146.706),
        v3(325.772, 536.228, 152.811),
        v3(216.718, 621.505, 186.634),
        v3(167.685, 487.5329, 142.1009),
        v3(57.1598, 451.9345, 145.9096),
        v3(8.554, 542.77, 174.827),
        v3(-148.985, 996.5, 235.885),
        v3(-2006.675, 445.9337, 102.021),
        v3(-1975.162, 629.493, 121.535),
        v3(-1812.335, 342.8018, 87.9612),
        v3(-1963.542, 246.943, 85.567),
        v3(-340.031, 6165.106, 30.663),
        v3(-404.723, 6316.063, 27.943),
        v3(-305.281, 6329.808, 31.4893),
        v3(-245.486, 6413.258, 30.261),
        v3(-110.0724, 6460.96, 30.6408),
        v3(-48.2033, 6580.343, 31.1805),
        v3(56.455, 6643.994, 31.28),
        v3(-103.7947, 6315.484, 30.5812),
        v3(2232.981, 5611.867, 53.9195),
        v3(1856.438, 3683.872, 33.2675),
        v3(3312.502, 5176.144, 18.6196),
        v3(1662.391, 4775.14, 41.006),
        v3(1724.588, 4643.431, 42.8755),
        v3(1968.356, 4622.632, 40.083),
        v3(1309.106, 4362.913, 40.5463),
        v3(722.405, 4186.963, 39.886),
        v3(92.067, 3743.533, 38.623),
        v3(33.199, 3668.209, 38.715),
        v3(-267.7338, 2628.924, 60.8669),
        v3(-263.6633, 2197.269, 129.4037),
        v3(749.868, 224.827, 86.426),
        v3(133.2061, -567.3676, 42.8161),
        v3(-1874.804, 2030.164, 138.7318),
        v3(-1114.113, 2689.189, 17.5833),
        v3(-3184.543, 1293.391, 13.5473),
        v3(-3205.871, 1151.494, 8.6673),
        v3(-3233.165, 933.7818, 16.1599),
        v3(-2997.617, 695.5018, 24.7621),
        v3(-3036.497, 491.4613, 5.7679),
        v3(-3087.551, 220.9675, 13.0732),
        v3(-769.6445, 5514.033, 33.8517),
        v3(1706.973, 6425.33, 31.7671),
        v3(2452.608, 4964.704, 45.581),
        v3(2638.939, 4245.413, 43.7446),
        v3(964.9565, -545.2515, 58.3475),
        v3(961.9368, -596.4669, 58.9027),
        v3(997.1859, -728.1738, 56.8192),
        v3(1207.301, -621.1257, 65.4421),
        v3(1371.074, -555.7357, 73.6891),
        v3(1323.79, -583.4503, 72.2514),
        v3(1261.874, -428.6422, 68.8054),
        v3(1011.482, -424.2754, 63.9561),
        v3(-2553.464, 1914.783, 168.0181),
        v3(3688.297, 4563.858, 24.1865),
        v3(-1523.871, 852.2529, 180.5948)
    },
    -- 拉玛有机坊产品 100
    ld_product = {
        v3(-1002.254, 130.075, 55.519),
        v3(-1504.595, -36.351, 54.707),
        v3(-1677.41, -443.6646, 39.8968),
        v3(-842.328, -345.95, 38.501),
        v3(-430.64, 288.196, 86.174),
        v3(1575.068, -1732.029, 87.9448),
        v3(-2038.497, 539.83, 109.752),
        v3(-2973.772, 20.3182, 7.4278),
        v3(-3235.982, 1104.414, 2.602),
        v3(-2630.007, 1874.927, 160.251),
        v3(-1875.84, 2027.968, 139.838),
        v3(-1596.847, 3054.303, 33.12),
        v3(1740.868, 3327.709, 41.211),
        v3(1323.174, 3008.294, 44.09),
        v3(1766.628, 3916.891, 34.821),
        v3(2704.12, 3521.006, 61.773),
        v3(3608.93, 3625.699, 40.827),
        v3(2141.796, 4790.276, 40.7243),
        v3(439.911, 6455.761, 36.068),
        v3(1444.224, 6331.349, 23.806),
        v3(-581.923, 5368.024, 70.294),
        v3(497.611, 5606.312, 795.85),
        v3(1384.78, 4288.897, 36.391),
        v3(712.585, 4111.207, 31.65),
        v3(325.916, 4429.151, 64.688),
        v3(-214.4409, 3601.96, 61.6145),
        v3(66.001, 3760.242, 39.943),
        v3(98.651, 3601.149, 39.752),
        v3(-1147.729, 4949.988, 221.278),
        v3(-2511.306, 3613.96, 13.469),
        v3(-1936.931, 3329.973, 33.215),
        v3(2497.993, -429.74, 93.2676),
        v3(3818.776, 4488.587, 4.532),
        v3(96.5449, -255.7652, 47.0503),
        v3(-1393.931, -1445.899, 4.308),
        v3(-929.642, -746.513, 19.752),
        v3(154.263, 1098.689, 231.338),
        v3(2982.726, 6368.5, 2.311),
        v3(-512.5049, -1626.817, 17.4995),
        v3(-56.232, 80.423, 71.868),
        v3(431.973, -2910.015, 6.734),
        v3(664.98, 1284.782, 360.1198),
        v3(-452.9, 1079.414, 327.803),
        v3(-196.239, -2354.753, 9.478),
        v3(248.439, 128.028, 103.099),
        v3(2661.16, 1640.974, 24.654),
        v3(1668.438, -26.473, 184.91),
        v3(-37.931, 1937.999, 189.8),
        v3(-1591.535, 801.656, 186.161),
        v3(2193.213, 5593.691, 53.684),
        v3(1641.563, 2656.195, 54.855),
        v3(-1608.398, 5262.396, 3.966),
        v3(-937.037, -1044.216, 0.436),
        v3(-2200.313, 4237.116, 48.046),
        v3(-1263.321, -367.5901, 44.5355),
        v3(1018.407, 2457.103, 44.758),
        v3(-3091.239, 660.393, 1.701),
        v3(-193.708, 793.051, 197.758),
        v3(987.808, -105.7523, 74.1212),
        v3(-927.8402, -2934.034, 14.1399),
        v3(-1640.297, -3165.138, 40.8515),
        v3(-1011.272, -1491.967, 4.7604),
        v3(343.7568, 946.6004, 204.4755),
        v3(750.829, 196.948, 85.651),
        v3(-331.626, 6285.987, 34.8),
        v3(-311.981, -1626.432, 31.473),
        v3(819.625, -796.649, 35.338),
        v3(132.977, -576.783, 18.278),
        v3(-1442.642, 567.622, 121.601),
        v3(-363.567, 572.64, 127.044),
        v3(-763.812, 705.641, 144.732),
        v3(1902.373, 572.778, 176.627),
        v3(-672.715, 59.853, 61.902),
        v3(43.7134, 2791.532, 57.6598),
        v3(1220.985, 1902.975, 78.0406),
        v3(2517.942, 2615.929, 38.086),
        v3(3455.177, 5510.634, 18.769),
        v3(1500.862, -2513.839, 56.26),
        v3(1467.102, 1096.74, 113.988),
        v3(545.206, 2880.917, 42.441),
        v3(2612.129, 2782.483, 34.102),
        v3(-14.178, 6491.451, 37.251),
        v3(-788.846, -2086.048, 9.164),
        v3(981.079, -2583.384, 10.37),
        v3(964.371, -1811.011, 31.146),
        v3(511.737, -1335.028, 29.488),
        v3(-69.0361, -1229.77, 29.3137),
        v3(202.812, -1758.72, 33.229),
        v3(-328.378, -1372.415, 41.193),
        v3(-1635.991, -1031.127, 13.024),
        v3(955.454, 73.628, 112.592),
        v3(265.722, -1335.354, 36.17),
        v3(-1033.097, -825.029, 19.049),
        v3(-592.9804, -875.5658, 25.5693),
        v3(-246.484, -786.507, 30.531),
        v3(479.364, -574.451, 28.5),
        v3(1098.204, -1528.952, 34.475),
        v3(580.785, -2284.23, 6.491),
        v3(-295.973, -308.098, 9.511),
        v3(-117.05, -1025.36, 27.318),
    },
    -- 雪人 25
    snowmens = {
        v3(-375.47916, 6230.158, 31.490055),
        v3(1560.3787, 6447.053, 23.9866),
        v3(3301.7886, 5149.8853, 18.34274),
        v3(1703.0568, 4671.928, 43.15301),
        v3(-1414.4647, 5094.9272, 60.674263),
        v3(1993.1008, 3829.6396, 32.167336),
        v3(224.9161, 3107.3345, 42.18394),
        v3(2360.0037, 2522.7166, 46.66731),
        v3(1510.8555, 1725.0353, 109.89355),
        v3(-48.96374, 1964.4028, 189.87181),
        v3(-1516.2083, 2140.2168, 56.11924),
        v3(-2826.2356, 1424.6211, 100.706116),
        v3(-2957.531, 723.6389, 28.792404),
        v3(-1946.0231, 594.93756, 119.79223),
        v3(-455.12027, 1130.5625, 325.89175),
        v3(-819.9067, 165.35524, 71.26295),
        v3(221.46722, -107.01075, 69.763985),
        v3(901.3996, -288.05026, 65.643715),
        v3(-780.418, 877.2859, 203.18001),
        v3(1275.6772, -642.3789, 68.208786),
        v3(178.00232, -895.9712, 30.69326),
        v3(-955.5352, -782.4186, 15.925326),
        v3(-1100.889, -1401.0138, 5.215467),
        v3(-247.92003, -1561.2175, 32.22973),
        v3(1341.4302, -1583.5093, 54.135414),
    },
    -- 仙人掌 76
    peyotes = {
        v3(171.4769, -1925.586, 20.156),
        v3(-234.541, -1516.663, 31.296),
        v3(-213.5869, 6455.24, 30.329),
        v3(327.064, 6430.808, 30.097),
        v3(2268.018, 4597.53, 34.175),
        v3(3102.362, 6034.412, 122.219),
        v3(-35.2434, 2868.4, 58.4023),
        v3(1733.005, 3850.126, 33.874),
        v3(340.023, 3565.621, 32.491),
        v3(-1858.733, 4806.635, 1.969),
        v3(490.588, 5530.081, 777.292),
        v3(-2792.443, 1432.48, 99.968),
        v3(-2999.09, 769.195, 26.167),
        v3(-855.473, 572.053, 95.69),
        v3(1021.663, 2910.82, 39.645),
        v3(-3078.123, 3202.819, 1.319),
        v3(-1557.408, 2581.642, -0.078),
        v3(2578.658, 5548.083, 59.436),
        v3(2573.032, 1250.679, 42.545),
        v3(-922.265, 4583.207, 230.673),
        v3(2820.144, -759.318, 1.471),
        v3(2385.41, 3335.046, 46.401),
        v3(-1275.095, 1895.234, 101.362),
        v3(1545.851, 1685.537, 108.875),
        v3(727.608, -235.347, 65.276),
        v3(-111.254, -413.31, 34.65),
        v3(-1881.692, -607.578, 14.588),
        v3(1071.716, -686.215, 56.692),
        v3(2066.84, 1940.29, 81.791),
        v3(1614.594, 6611.073, 14.617),
        v3(-1179.712, 3854.412, 488.493),
        v3(2940.191, 2745.018, 42.231),
        v3(1288.918, -1059.638, 38.242),
        v3(-1678.225, 357.721, 83.711),
        v3(-778.6017, 117.243, 55.456),
        v3(-794.2935, -727.5123, 26.418),
        v3(330.147, 440.902, 144.37),
        v3(-1314.857, -424.843, 34.462),
        v3(224.4638, 49.089, 83.1668),
        v3(1276.405, -1720.52, 53.795),
        v3(-960.924, -2034.23, 8.524),
        v3(-838.726, -1216.943, 5.902),
        v3(2029.585, 498.1133, 163.1716),
        v3(2764.432, -1600.286, 0.865),
        v3(1498.68, -2722.499, 1.933),
        v3(217.1979, -980.8727, 28.7917),
        v3(686.64, -1109.484, 21.477),
        v3(-220.848, 1006.557, 231.478),
        v3(493.725, 1439.799, 350.758),
        v3(-995.688, 6258.749, 1.433),
        v3(-2871.632, 2605.268, -10.2517),
        v3(56.2666, 7365.265, -5.357),
        v3(-2861.12, 3900.557, -33.818),
        v3(-1588.691, 5312.984, -5.1802),
        v3(475.3864, 6946.059, -7.333),
        v3(2453.258, 6692.051, -14.2188),
        v3(4235.621, 4105.97, -31.4225),
        v3(-138.1969, 4060.704, 26.1655),
        v3(3395.229, 2252.51, -14.6511),
        v3(2946.109, 812.0292, -11.0387),
        v3(3194.644, -356.9405, -33.105),
        v3(-1745.945, -1277.373, -19.8266),
        v3(-3320.881, 1335.263, -17.2728),
        v3(2183.961, -2714.103, -29.2357),
        v3(-169.7448, -2890.406, -24.8927),
        v3(-164.6574, -2309.281, -29.0637),
        v3(618.835, -2192.552, -8.5744),
        v3(649.5286, -3232.574, -16.81),
        v3(-3078.018, -104.2799, -18.3237),
        v3(-2205.006, -681.4622, -10.409),
        v3(825.2657, -2790.566, -22.1959),
        v3(3415.271, 5253.468, -12.1134),
        v3(1219.192, 4119.479, 13.7925),
        v3(-1014.588, -1707.169, -9.2745),
        v3(1674.983, 5141.897, 149.6046),
        v3(-21.0273, -1424.168, 29.7078),
    },
    -- 媒体记忆棒 4
    media_sticks = {
        v3(-2172.587, 1159.6364, -24.372166),
        v3(2725.424, -382.7012, -48.97467),
        v3(-1618.6365, -3010.6003, -75.205),
        v3(955.64325, 49.459408, 112.55278)
    },
    -- 沉船藏宝箱
    ship_wrecks = {
        [0] = v3(-389.978, -2215.861, 0.565),
        [1] = v3(-872.646, -3121.243, 2.533),
        [2] = v3(-1969.555, -3073.933, 1.899),
        [3] = v3(-1227.362, -1862.997, 1.071),
        [4] = v3(-1684.489, -1077.488, 0.464),
        [5] = v3(-2219.716, -438.266, 0.828),
        [6] = v3(-3099.804, 494.968, 0.134),
        [7] = v3(-3226.636, 1337.312, 0.634),
        [8] = v3(-2879.233, 2247.547, 0.878),
        [9] = v3(-1767.392, 2642.144, 0.089),
        [10] = v3(-180.913, 3081.589, 19.814),
        [11] = v3(-2198.02, 4606.557, 1.402),
        [12] = v3(-1356.295, 5379.136, 0.351),
        [13] = v3(-844.701, 6045.489, 1.201),
        [14] = v3(126.747, 7095.39, 0.484),
        [15] = v3(473.135, 6741.893, -0.009),
        [16] = v3(1469.845, 6629.33, -0.152),
        [17] = v3(2356.588, 6663.491, -0.172),
        [18] = v3(3380.806, 5670.246, 0.898),
        [19] = v3(3198.166, 5091.909, 0.464),
        [20] = v3(3947.421, 4403.337, 0.275),
        [21] = v3(3901.5327, 3323.1387, 0.5902),
        [22] = v3(3646.8667, 3120.687, 0.4864),
        [23] = v3(2891.847, 1790.7085, 1.4015),
        [24] = v3(2779.8674, 1106.5143, -0.0319),
        [25] = v3(2783.5151, 82.6473, -0.0161),
        [26] = v3(2820.225, -759.2029, 1.4572),
        [27] = v3(2772.996, -1606.0311, -0.1129),
        [28] = v3(1818.4303, -2718.4414, 0.1797),
        [29] = v3(987.383, -2681.047, -0.1296)
    },
    -- 佩里科岛 藏宝箱
    treasure_chests = {
        [0] = v3(4877.7646, -4781.151, 1.1379),
        [1] = v3(4535.187, -4703.817, 1.1286),
        [2] = v3(3900.6318, -4704.9194, 3.4813),
        [3] = v3(4823.4844, -4323.176, 4.6816),
        [4] = v3(5175.097, -4678.9375, 1.4205),
        [5] = v3(5590.9507, -5216.8467, 13.351),
        [6] = v3(5457.7954, -5860.7734, 19.0936),
        [7] = v3(4855.598, -5561.794, 26.5093),
        [8] = v3(4854.77, -5162.7295, 1.4387),
        [9] = v3(4178.2944, -4357.763, 1.5826),
        [10] = v3(4942.0825, -5168.135, -3.575),
        [11] = v3(4560.804, -4356.775, -7.888),
        [12] = v3(5598.9644, -5604.2393, -6.0489),
        [13] = v3(5264.7236, -4920.671, -2.8715),
        [14] = v3(4944.2183, -4293.736, -6.6942),
        [15] = v3(4560.804, -4356.775, -7.888),
        [16] = v3(3983.0261, -4540.1865, -6.1264),
        [17] = v3(4414.676, -4651.4575, -5.083),
        [18] = v3(4540.07, -4774.899, -3.9321),
        [19] = v3(4777.6006, -5394.6265, -5.0127)
    },
    -- 佩里科岛 地下藏匿品
    buried_stashes = {
        [0] = v3(5579.7026, -5231.42, 14.2512),
        [1] = v3(5481.595, -5855.187, 19.128),
        [2] = v3(5549.2407, -5747.577, 10.427),
        [3] = v3(5295.542, -5587.4307, 61.3964),
        [4] = v3(5136.9844, -5524.6675, 52.7719),
        [5] = v3(4794.91, -5546.516, 21.4945),
        [6] = v3(4895.3125, -5335.3433, 9.0204),
        [7] = v3(4994.968, -5136.416, 1.476),
        [8] = v3(5323.654, -5276.0596, 33.0353),
        [9] = v3(5362.1177, -5170.0854, 28.035),
        [10] = v3(5164.5522, -4706.8384, 1.1632),
        [11] = v3(4888.6104, -4789.4756, 1.4911),
        [12] = v3(4735.3096, -4687.2236, 1.2879),
        [13] = v3(4887.2036, -4630.111, 13.149),
        [14] = v3(4796.803, -4317.4175, 4.3515),
        [15] = v3(4522.936, -4649.638, 10.037),
        [16] = v3(4408.228, -4470.875, 3.3683),
        [17] = v3(4348.7827, -4311.3193, 1.3335),
        [18] = v3(4235.67, -4552.0557, 4.0738),
        [19] = v3(3901.899, -4720.187, 3.4537)
    },
    -- 寻宝活动线索 3
    treasure_hunt_clues = {
        v3(-1914.0333, 1388.7535, 218.3793 + 1.0),
        v3(1994.701, 5079.219, 41.663 + 1.0),
        v3(1923.548, 3985.898, 31.257 + 1.0)
    },

}



local function tp(coords)
    local ent = entities.get_user_vehicle_as_handle(false)
    if ent == INVALID_GUID then ent = players.user_ped() end
    ENTITY.SET_ENTITY_COORDS_NO_OFFSET(ent, coords.x, coords.y, coords.z, true, false, false)
end

local function tunable_get_bool(offset)
    return memory.read_int(memory.script_global(262145 + offset)) ~= 0
end
local function tunable_set_int(offset, value)
    memory.write_int(memory.script_global(262145 + offset), value)
end
local function tunable_set_bool(offset, bool)
    memory.write_int(memory.script_global(262145 + offset), bool and 1 or 0)
end

local function GET_PACKED_STAT_INT_CODE(statIndex)
    return STATS.GET_PACKED_STAT_INT_CODE(statIndex, util.get_char_slot())
end
local function GET_PACKED_STAT_BOOL_CODE(statIndex)
    return STATS.GET_PACKED_STAT_BOOL_CODE(statIndex, util.get_char_slot())
end

local function SET_PACKED_STAT_INT_CODE(statIndex, value)
    STATS.SET_PACKED_STAT_INT_CODE(statIndex, value, util.get_char_slot())
end


local function ADD_MP_INDEX(stat, add_mp_index)
    if add_mp_index == nil or add_mp_index then
        return "MP" .. util.get_char_slot() .. "_" .. stat
    end
    return stat
end
local function STAT_GET_INT(stat, add_mp_index)
    stat = ADD_MP_INDEX(stat, add_mp_index)

    local ptr = memory.alloc_int()
    STATS.STAT_GET_INT(util.joaat(stat), ptr, -1)
    return memory.read_int(ptr)
end


local function has_jammer(jam_id)
    return GET_PACKED_STAT_BOOL_CODE(28099 + jam_id)
end
local function has_action_figure(fig_id)
    if fig_id >= 98 then
        for i = 0, 97 do
            if not GET_PACKED_STAT_BOOL_CODE(26811 + i) then
                return true
            end
        end
    end
    return GET_PACKED_STAT_BOOL_CODE(26811 + fig_id)
end
local function has_playing_card(card_id)
    return GET_PACKED_STAT_BOOL_CODE(26911 + card_id)
end
local function has_movie_prop(movie_prop_id)
    return GET_PACKED_STAT_BOOL_CODE(30230 + movie_prop_id)
end
local function has_lantern(lntrn_id)
    local stat = 34252 + lntrn_id
    if lntrn_id > 9 then
        stat += 250
    end
    return GET_PACKED_STAT_BOOL_CODE(stat)
end
local function has_ld_product(prod_id)
    return GET_PACKED_STAT_BOOL_CODE(34262 + prod_id)
end
local function has_snowman(snowman_id)
    return GET_PACKED_STAT_BOOL_CODE(36630 + snowman_id)
end
local function get_blaine_county_progress()
    local stat_id = 28149
    for i = 1, 5 do
        if not GET_PACKED_STAT_BOOL_CODE(stat_id + i) then
            return i
        end
    end
    return 6
end






---------------------------------------------
----------    Script Menu Start    ----------
---------------------------------------------

-- Check Game Version
local CURRENT_GAME_VERSION <const> = menu.get_version().game
if SUPPORT_GAME_VERSION ~= CURRENT_GAME_VERSION then
    local state_text = string.format(
        "支持的游戏版本: %s\n当前游戏版本: %s",
        SUPPORT_GAME_VERSION, CURRENT_GAME_VERSION)
    util.toast(state_text)
end



local Menu_Root <const> = menu.my_root()

menu.divider(Menu_Root, "RS Collectibles")


local Menus = {
    Action_Figures = {},
    Playing_Cards = {},
    Signal_Jammers = {},
    Movie_Props = {},
    LD_Organics_Product = {},
    Lanterns = {},
    Snowmens = {},
}

local function generate_collectible_commands(menu_parent, menu_name, coords_tables, menu_tables, has_func)
    menu.action(menu_parent, "刷新收集状态", {}, "", function()
        for index, command in pairs(menu_tables) do
            local name = menu_name .. " " .. index
            if has_func(index - 1) then
                name = name .. " [已收集]"
            end
            menu.set_menu_name(command, name)
        end
    end)

    for index, coords in pairs(coords_tables) do
        local name = menu_name .. " " .. index
        if has_func(index - 1) then
            name = name .. " [已收集]"
        end

        local menu_action = menu.action(menu_parent, name, {}, "", function()
            tp(coords)
        end)

        menu_tables[index] = menu_action
    end
end

local function generate_collectible_commands2(menu_parent, menu_name, coords_tables)
    for index, coords in pairs(coords_tables) do
        local name = menu_name .. " " .. index

        menu.action(menu_parent, name, {}, "", function()
            tp(coords)
        end)
    end
end




local Action_Figures <const> = menu.list(Menu_Root, "手办 100", {}, "")

generate_collectible_commands(Action_Figures, "手办", Coords.figures,
    Menus.Action_Figures, has_action_figure)



local Playing_Cards <const> = menu.list(Menu_Root, "纸牌 54", {}, "")

generate_collectible_commands(Playing_Cards, "纸牌", Coords.cards,
    Menus.Playing_Cards, has_playing_card)



local Signal_Jammers <const> = menu.list(Menu_Root, "信号干扰器 50", {}, "")

menu.toggle_loop(Signal_Jammers, "自动摧毁信号干扰器", {}, "", function()
    for _, ptr in pairs(entities.get_all_objects_as_pointers()) do
        local model_hash = entities.get_model_hash(ptr)
        if model_hash == -305186631 and memory.read_float(ptr + 0x280) > 0 then
            util.yield(100)
            memory.write_float(ptr + 0x280, 0)
        end
    end
end)
generate_collectible_commands(Signal_Jammers, "信号干扰器", Coords.jammers,
    Menus.Signal_Jammers, has_jammer)



local Movie_Props <const> = menu.list(Menu_Root, "电影道具 7", {}, "")

generate_collectible_commands(Movie_Props, "电影道具", Coords.movie_prop,
    Menus.Movie_Props, has_movie_prop)



local LD_Organics_Product <const> = menu.list(Menu_Root, "拉玛有机坊产品 100", {}, "")

generate_collectible_commands(LD_Organics_Product, "拉玛有机坊产品", Coords.ld_product,
    Menus.LD_Organics_Product, has_ld_product)



local Peyote_Plants <const> = menu.list(Menu_Root, "仙人掌 76", {}, "")

menu.toggle(Peyote_Plants, "启用 收集活动", {}, "", function(toggle)
    tunable_set_bool(Tunables.VC_PEYOTE_ENABLE, toggle)
end, tunable_get_bool(Tunables.VC_PEYOTE_ENABLE))
generate_collectible_commands2(Peyote_Plants, "仙人掌", Coords.peyotes)



local Lanterns <const> = menu.list(Menu_Root, "万圣节南瓜 200", {}, "")

menu.toggle(Lanterns, "启用 收集活动", {}, "", function(toggle)
    tunable_set_bool(Tunables.COLLECTABLES_TRICK_OR_TREAT, toggle)
end, tunable_get_bool(Tunables.COLLECTABLES_TRICK_OR_TREAT))
generate_collectible_commands(Lanterns, "万圣节南瓜", Coords.lanterns,
    Menus.Lanterns, has_lantern)



local Snowmens <const> = menu.list(Menu_Root, "雪人 25", {}, "")

menu.toggle(Snowmens, "启用 收集活动", {}, "", function(toggle)
    tunable_set_bool(Tunables.COLLECTABLES_SNOWMEN, toggle)
end, tunable_get_bool(Tunables.COLLECTABLES_SNOWMEN))
menu.toggle_loop(Snowmens, "自动摧毁雪人", {}, "", function()
    for _, ptr in pairs(entities.get_all_objects_as_pointers()) do
        local model_hash = entities.get_model_hash(ptr)
        if model_hash == -722815214 or model_hash == 265563368 or model_hash == -241831832 then
            if memory.read_float(ptr + 0x280) > 0 then
                util.yield(100)
                memory.write_float(ptr + 0x280, 0)
            end
        end
    end
end)
generate_collectible_commands(Snowmens, "雪人", Coords.snowmens,
    Menus.Snowmens, has_snowman)



local Media_Sticks <const> = menu.list(Menu_Root, "媒体记忆棒 4", {}, "")

generate_collectible_commands2(Media_Sticks, "媒体记忆棒", Coords.media_sticks)



local Ship_Wrecks <const> = menu.list(Menu_Root, "沉船藏宝箱 1 (每日)", {}, "")

menu.action(Ship_Wrecks, "沉船藏宝箱 1", {}, "", function()
    local location = STAT_GET_INT("DAILYCOLLECT_SHIPWRECKED0")
    local coords = Coords.ship_wrecks[location]
    if coords == nil then return end
    tp(coords)
end)



local Treasure_Chests <const> = menu.list(Menu_Root, "佩里科岛 藏宝箱 2 (每日)", {}, "")

for i = 0, 1 do
    menu.action(Treasure_Chests, "藏宝箱 " .. i + 1, {}, "", function()
        local location = STAT_GET_INT("DAILYCOLLECTABLES_TREASURE" .. i)
        local coords = Coords.treasure_chests[location]
        if coords == nil then return end
        tp(coords)
    end)
end



local Buried_Stashes <const> = menu.list(Menu_Root, "佩里科岛 地下藏匿品 2 (每日)", {}, "")

for i = 0, 1 do
    menu.action(Buried_Stashes, "地下藏匿品 " .. i + 1, {}, "", function()
        local location = STAT_GET_INT("DAILYCOLLECT_BURIEDSTASH" .. i)
        local coords = Coords.buried_stashes[location]
        if coords == nil then return end
        tp(coords)
    end)
end



local Treasure_Hunt <const> = menu.list(Menu_Root, "寻宝活动", {}, "", function()
    if GET_PACKED_STAT_INT_CODE(PackedStats.REVOLVER_TREASURE_HUNT_PROGRESS) >= 4 then
        util.toast("你已完成寻宝活动")
    end
end)

menu.action(Treasure_Hunt, "立即接收寻宝活动邮件", {}, "", function()
    tunable_set_int(Tunables.FLOW_TIMINGS_TREASURE_HUNT_EMAIL_TIMER, 0)
end)
menu.action(Treasure_Hunt, "起始线索", {}, "进入范围内才可以传送", function()
    local hash = util.joaat("xm_prop_x17_note_paper_01a")
    for _, ent_ptr in pairs(entities.get_all_objects_as_pointers()) do
        local model_hash = entities.get_model_hash(ent_ptr)
        if model_hash == hash then
            local coords = entities.get_position(ent_ptr)
            coords.z = coords.z + 1.0
            tp(coords)
        end
    end
end)
generate_collectible_commands2(Treasure_Hunt, "线索", Coords.treasure_hunt_clues)



local Bounty_Hunt <const> = menu.list(Menu_Root, "悬赏活动", {}, "", function()
    if GET_PACKED_STAT_INT_CODE(PackedStats.RDR_BOUNTY_HUNTER_NUMBER_OF_BOUNTIES_COMPLETED) >= 6 then
        util.toast("你已完成悬赏活动")
    end
end)

menu.action(Bounty_Hunt, "立即接收悬赏目标邮件", {}, "", function()
    tunable_set_int(Tunables.BOUNTYHUNTERHATCHETEMAILTIMER, 0)
    tunable_set_int(Tunables.BOUNTYHUNTERHATCHETEMAILTIMER2, 0)
    tunable_set_int(Tunables.BOUNTYHUNTERHATCHETEMAILTIMER3, 0)
end)
menu.action(Bounty_Hunt, "悬赏目标 传送到我", {}, "进入范围内才可以传送", function()
    local coords = ENTITY.GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(players.user_ped(), 0.0, 2.0, 0.0)

    local blip = HUD.GET_CLOSEST_BLIP_INFO_ID(458)
    if HUD.DOES_BLIP_EXIST(blip) then
        local ent = HUD.GET_BLIP_INFO_ID_ENTITY_INDEX(blip)
        ENTITY.SET_ENTITY_COORDS_NO_OFFSET(ent, coords.x, coords.y, coords.z, true, false, false)

        TASK.CLEAR_PED_TASKS_IMMEDIATELY(ent)

        return
    end

    for _, ent in pairs(entities.get_all_peds_as_handles()) do
        if ENTITY.IS_ENTITY_A_MISSION_ENTITY(ent) and not entities.is_player_ped(ent) then
            ENTITY.SET_ENTITY_COORDS_NO_OFFSET(ent, coords.x, coords.y, coords.z, true, false, false)

            TASK.CLEAR_PED_TASKS_IMMEDIATELY(ent)
        end
    end
end)









-----------------------------------------
----------    About Options    ----------
-----------------------------------------

local About_Options <const> = menu.list(Menu_Root, "关于", {}, "")

menu.readonly(About_Options, "Author", "Rostal")
menu.hyperlink(About_Options, "Github", "https://github.com/TCRoid/Stand-Lua-RScript")
menu.readonly(About_Options, "Version", SCRIPT_VERSION)
menu.readonly(About_Options, "Support Game Version", SUPPORT_GAME_VERSION)
